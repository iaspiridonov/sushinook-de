<?php namespace Core\Model;

use Core\Gateway\Relations;
use Core\Service\Locale;
use Core\Gateway\Subjects;
use Core\Collection;
use Core\Model\Subject\AbstractModel;
use Core\Gateway\TypesAttributes;

class Subject extends AbstractModel
{
    /** @var Collection\Subject\RelationsCollection */
    protected $relations;

    public $target_id;

    public function __construct($typeName)
    {
        parent::__construct($typeName);

        $this->relations = (new Collection\Subject\RelationsCollection)->setSubject($this);
    }

    protected function setTable()
    {
        $this->table = $this->getType()->subjectsTable();

        return $this;
    }

    public function populate(array $rowData, $rowExistsInDatabase = false)
    {
        if (array_key_exists('target_id', $rowData)) {
            $this->target_id = $rowData['target_id'];
            unset($rowData['target_id']);
        }

        foreach ($rowData as $name => &$value) {

            $propertyName = $name;

            if (preg_match('/^_([a-z]+)_(\S+)$/', $name, $matches)) {
                $propertyName = $matches[2];
            }

            if ($property = $this->getType()->getAttributes()->get($propertyName)) {
                if ($property->isProperty()) {
                    if ($property->isMulticheck() && !is_array($value) && !is_null($value)) {
                        $value = json_decode($value, true);
                    }
                }
            } else if (!in_array($name, ['id', 'is_related'])) {
                unset($rowData[$name]);
            }
        }

        return parent::populate($rowData, $rowExistsInDatabase);
    }

    protected function executeSave($rowData)
    {
        foreach ($rowData as $name => &$value) {

            $propertyName = $name;

            if (preg_match('/^_([a-z]+)_(\S+)$/', $name, $matches)) {
                $propertyName = $matches[2];
            }

            if ($property = $this->getType()->getAttributes()->get($propertyName)) {
                if ($property->isProperty()) {
                    if ($property->isMulticheck() && !is_string($value)) {
                        $value = json_encode((array)$value);
                    }
                } else if ($property->isRelation()) {
                    if (!$property->isDirectRelation() || !$property->isFactory()) {
                        goto deleteFromData;
                    }
                }
            } else if (!in_array($name, ['id', 'is_related'])) {
                deleteFromData:
                unset($rowData[$name]);
            }
        }

        return parent::executeSave($rowData); // TODO: Change the autogenerated stub
    }

    /**
     * @return Collection\Subject\RelationsCollection
     */
    public function getRelations($relationName = null)
    {
        return $relationName ? $this->relations->getRelation($relationName) : $this->relations;
    }

    public function __set($name, $value)
    {
        if ($this->getType()->getTranslatableProperties()->has($name)) {
            $this->offsetSet(TypesAttributes::getTranslatableColumnName($name, Locale::getLocale()), $value);
        }

        parent::__set($name, $value);
    }

    public function __call($name, $arguments)
    {
        if ($this->getRelations()->hasRelation($name)) {
            return $this->getRelations()->getRelationService($name);
        } elseif (!empty($arguments[0]) && in_array(($locale = $arguments[0]), Locale::getLocales()) && $this->getType()->getTranslatableProperties()->has($name)) {
            $columnName = TypesAttributes::getTranslatableColumnName($name, $locale);

            if (!empty($arguments[1])) {
                $this->offsetSet($columnName, $arguments[1]);

                return $this;
            }

            return $this->offsetGet($columnName);
        }

        return null;
    }

    public function __get($name)
    {
        if ($this->getRelations()->hasRelation($name)) {
            return $this->getRelations()->getRelation($name);
        } elseif ($this->getType()->getTranslatableProperties()->has($name)) {
            return $this->offsetGet(TypesAttributes::getTranslatableColumnName($name, Locale::getLocale()));
        }

        return parent::__get($name);
    }

    public function offsetExists($offset)
    {
        if ($this->getRelations()->hasRelation($offset)) {
            return false;
        }

        return parent::offsetExists($offset);
    }

    public function __isset($name)
    {
        if ($this->getRelations()->hasRelation($name)) {
            return true;
        } elseif ($this->getType()->getTranslatableProperties()->has($name)) {
            return true;
        }

        return parent::__isset($name);
    }

    public function delete()
    {
        return Subjects::of($this->getType('name'))->delete(['id' => $this->id]);
    }

    public function getTitle()
    {
        return ($titleProperty = $this->getType()->getProperties()->first(function (Type\Attribute\Property $item) {
            return $item->isVisible();
        })) ? $this->getType()->label.': '.$this->__get($titleProperty->name) : $this->getType()->label.'['.$this->id.']';
    }
}